var livequery_source = "\x2F*! Copyright (c) 2008 Brandon Aaron (http:\x2F\x2Fbrandonaaron.net)\n * Dual licensed under the MIT (http:\x2F\x2Fwww.opensource.org\x2Flicenses\x2Fmit-license.php) \n * and GPL (http:\x2F\x2Fwww.opensource.org\x2Flicenses\x2Fgpl-license.php) licenses.\n *\n * Version: 1.0.3\n * Requires jQuery 1.1.3+\n * Docs: http:\x2F\x2Fdocs.jquery.com\x2FPlugins\x2Flivequery\n *\x2F\n\n(function($) {\n\t\n$.extend($.fn, {\n\tlivequery: function(type, fn, fn2) {\n\t\tvar self = this, q;\n\t\t\n\t\t\x2F\x2F Handle different call patterns\n\t\tif ($.isFunction(type))\n\t\t\tfn2 = fn, fn = type, type = undefined;\n\t\t\t\n\t\t\x2F\x2F See if Live Query already exists\n\t\t$.each( $.livequery.queries, function(i, query) {\n\t\t\tif ( self.selector == query.selector \&\& self.context == query.context \&\&\n\t\t\t\ttype == query.type \&\& (!fn || fn.$lqguid == query.fn.$lqguid) \&\& (!fn2 || fn2.$lqguid == query.fn2.$lqguid) )\n\t\t\t\t\t\x2F\x2F Found the query, exit the each loop\n\t\t\t\t\treturn (q = query) \&\& false;\n\t\t});\n\t\t\n\t\t\x2F\x2F Create new Live Query if it wasn\'t found\n\t\tq = q || new $.livequery(this.selector, this.context, type, fn, fn2);\n\t\t\n\t\t\x2F\x2F Make sure it is running\n\t\tq.stopped = false;\n\t\t\n\t\t\x2F\x2F Run it immediately for the first time\n\t\tq.run();\n\t\t\n\t\t\x2F\x2F Contnue the chain\n\t\treturn this;\n\t},\n\t\n\texpire: function(type, fn, fn2) {\n\t\tvar self = this;\n\t\t\n\t\t\x2F\x2F Handle different call patterns\n\t\tif ($.isFunction(type))\n\t\t\tfn2 = fn, fn = type, type = undefined;\n\t\t\t\n\t\t\x2F\x2F Find the Live Query based on arguments and stop it\n\t\t$.each( $.livequery.queries, function(i, query) {\n\t\t\tif ( self.selector == query.selector \&\& self.context == query.context \&\& \n\t\t\t\t(!type || type == query.type) \&\& (!fn || fn.$lqguid == query.fn.$lqguid) \&\& (!fn2 || fn2.$lqguid == query.fn2.$lqguid) \&\& !this.stopped )\n\t\t\t\t\t$.livequery.stop(query.id);\n\t\t});\n\t\t\n\t\t\x2F\x2F Continue the chain\n\t\treturn this;\n\t}\n});\n\n$.livequery = function(selector, context, type, fn, fn2) {\n\tthis.selector = selector;\n\tthis.context  = context || document;\n\tthis.type     = type;\n\tthis.fn       = fn;\n\tthis.fn2      = fn2;\n\tthis.elements = [];\n\tthis.stopped  = false;\n\t\n\t\x2F\x2F The id is the index of the Live Query in $.livequery.queries\n\tthis.id = $.livequery.queries.push(this)-1;\n\t\n\t\x2F\x2F Mark the functions for matching later on\n\tfn.$lqguid = fn.$lqguid || $.livequery.guid++;\n\tif (fn2) fn2.$lqguid = fn2.$lqguid || $.livequery.guid++;\n\t\n\t\x2F\x2F Return the Live Query\n\treturn this;\n};\n\n$.livequery.prototype = {\n\tstop: function() {\n\t\tvar query = this;\n\t\t\n\t\tif ( this.type )\n\t\t\t\x2F\x2F Unbind all bound events\n\t\t\tthis.elements.unbind(this.type, this.fn);\n\t\telse if (this.fn2)\n\t\t\t\x2F\x2F Call the second function for all matched elements\n\t\t\tthis.elements.each(function(i, el) {\n\t\t\t\tquery.fn2.apply(el);\n\t\t\t});\n\t\t\t\n\t\t\x2F\x2F Clear out matched elements\n\t\tthis.elements = [];\n\t\t\n\t\t\x2F\x2F Stop the Live Query from running until restarted\n\t\tthis.stopped = true;\n\t},\n\t\n\trun: function() {\n\t\t\x2F\x2F Short-circuit if stopped\n\t\tif ( this.stopped ) return;\n\t\tvar query = this;\n\t\t\n\t\tvar oEls = this.elements,\n\t\t\tels  = $(this.selector, this.context),\n\t\t\tnEls = els.not(oEls);\n\t\t\n\t\t\x2F\x2F Set elements to the latest set of matched elements\n\t\tthis.elements = els;\n\t\t\n\t\tif (this.type) {\n\t\t\t\x2F\x2F Bind events to newly matched elements\n\t\t\tnEls.bind(this.type, this.fn);\n\t\t\t\n\t\t\t\x2F\x2F Unbind events to elements no longer matched\n\t\t\tif (oEls.length \x3E 0)\n\t\t\t\t$.each(oEls, function(i, el) {\n\t\t\t\t\tif ( $.inArray(el, els) \x3C 0 )\n\t\t\t\t\t\t$.event.remove(el, query.type, query.fn);\n\t\t\t\t});\n\t\t}\n\t\telse {\n\t\t\t\x2F\x2F Call the first function for newly matched elements\n\t\t\tnEls.each(function() {\n\t\t\t\tquery.fn.apply(this);\n\t\t\t});\n\t\t\t\n\t\t\t\x2F\x2F Call the second function for elements no longer matched\n\t\t\tif ( this.fn2 \&\& oEls.length \x3E 0 )\n\t\t\t\t$.each(oEls, function(i, el) {\n\t\t\t\t\tif ( $.inArray(el, els) \x3C 0 )\n\t\t\t\t\t\tquery.fn2.apply(el);\n\t\t\t\t});\n\t\t}\n\t}\n};\n\n$.extend($.livequery, {\n\tguid: 0,\n\tqueries: [],\n\tqueue: [],\n\trunning: false,\n\ttimeout: null,\n\t\n\tcheckQueue: function() {\n\t\tif ( $.livequery.running \&\& $.livequery.queue.length ) {\n\t\t\tvar length = $.livequery.queue.length;\n\t\t\t\x2F\x2F Run each Live Query currently in the queue\n\t\t\twhile ( length-- )\n\t\t\t\t$.livequery.queries[ $.livequery.queue.shift() ].run();\n\t\t}\n\t},\n\t\n\tpause: function() {\n\t\t\x2F\x2F Don\'t run anymore Live Queries until restarted\n\t\t$.livequery.running = false;\n\t},\n\t\n\tplay: function() {\n\t\t\x2F\x2F Restart Live Queries\n\t\t$.livequery.running = true;\n\t\t\x2F\x2F Request a run of the Live Queries\n\t\t$.livequery.run();\n\t},\n\t\n\tregisterPlugin: function() {\n\t\t$.each( arguments, function(i,n) {\n\t\t\t\x2F\x2F Short-circuit if the method doesn\'t exist\n\t\t\tif (!$.fn[n]) return;\n\t\t\t\n\t\t\t\x2F\x2F Save a reference to the original method\n\t\t\tvar old = $.fn[n];\n\t\t\t\n\t\t\t\x2F\x2F Create a new method\n\t\t\t$.fn[n] = function() {\n\t\t\t\t\x2F\x2F Call the original method\n\t\t\t\tvar r = old.apply(this, arguments);\n\t\t\t\t\n\t\t\t\t\x2F\x2F Request a run of the Live Queries\n\t\t\t\t$.livequery.run();\n\t\t\t\t\n\t\t\t\t\x2F\x2F Return the original methods result\n\t\t\t\treturn r;\n\t\t\t}\n\t\t});\n\t},\n\t\n\trun: function(id) {\n\t\tif (id != undefined) {\n\t\t\t\x2F\x2F Put the particular Live Query in the queue if it doesn\'t already exist\n\t\t\tif ( $.inArray(id, $.livequery.queue) \x3C 0 )\n\t\t\t\t$.livequery.queue.push( id );\n\t\t}\n\t\telse\n\t\t\t\x2F\x2F Put each Live Query in the queue if it doesn\'t already exist\n\t\t\t$.each( $.livequery.queries, function(id) {\n\t\t\t\tif ( $.inArray(id, $.livequery.queue) \x3C 0 )\n\t\t\t\t\t$.livequery.queue.push( id );\n\t\t\t});\n\t\t\n\t\t\x2F\x2F Clear timeout if it already exists\n\t\tif ($.livequery.timeout) clearTimeout($.livequery.timeout);\n\t\t\x2F\x2F Create a timeout to check the queue and actually run the Live Queries\n\t\t$.livequery.timeout = setTimeout($.livequery.checkQueue, 20);\n\t},\n\t\n\tstop: function(id) {\n\t\tif (id != undefined)\n\t\t\t\x2F\x2F Stop are particular Live Query\n\t\t\t$.livequery.queries[ id ].stop();\n\t\telse\n\t\t\t\x2F\x2F Stop all Live Queries\n\t\t\t$.each( $.livequery.queries, function(id) {\n\t\t\t\t$.livequery.queries[ id ].stop();\n\t\t\t});\n\t}\n});\n\n\x2F\x2F Register core DOM manipulation methods\n$.livequery.registerPlugin(\'append\', \'prepend\', \'after\', \'before\', \'wrap\', \'attr\', \'removeAttr\', \'addClass\', \'removeClass\', \'toggleClass\', \'empty\', \'remove\');\n\n\x2F\x2F Run Live Queries when the Document is ready\n$(function() { $.livequery.play(); });\n\n\n\x2F\x2F Save a reference to the original init method\nvar init = $.prototype.init;\n\n\x2F\x2F Create a new init method that exposes two new properties: selector and context\n$.prototype.init = function(a,c) {\n\t\x2F\x2F Call the original init and save the result\n\tvar r = init.apply(this, arguments);\n\t\n\t\x2F\x2F Copy over properties if they exist already\n\tif (a \&\& a.selector)\n\t\tr.context = a.context, r.selector = a.selector;\n\t\t\n\t\x2F\x2F Set properties\n\tif ( typeof a == \'string\' )\n\t\tr.context = c || document, r.selector = a;\n\t\n\t\x2F\x2F Return the result\n\treturn r;\n};\n\n\x2F\x2F Give the init function the jQuery prototype for later instantiation (needed after Rev 4091)\n$.prototype.init.prototype = $.prototype;\n\t\n})(jQuery);";
